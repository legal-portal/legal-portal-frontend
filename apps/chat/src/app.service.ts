import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Message, MessageDocument } from './message.schema'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω

@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);

  constructor(
    // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º Mongoose –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    @InjectModel(Message.name) private messageModel: Model<MessageDocument>,
  ) {
    this.logger.log('AppService initialized, MessageModel injected.');
  }

  getHello(): string {
    return 'Hello from Chat Service with MongoDB!';
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±—É–¥—É—â–µ–≥–æ API)
  async createMessage(text: string, sender: string, roomId: string): Promise<MessageDocument> {
    const newMessage = new this.messageModel({ text, sender, roomId });
    this.logger.log(`Creating message: ${text} from ${sender} in room ${roomId}`);
    return newMessage.save();
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–Ω–∞–ª–æ–≥ –≤–∞—à–µ–≥–æ /api/users)
  async findAllMessages(): Promise<MessageDocument[]> {
    this.logger.log('Fetching all messages from MongoDB');
    return this.messageModel.find().exec(); // .exec() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise
  }

  // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∏–¥–∏–Ω–≥–∞, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ —Å–µ—Ä–≤–∏—Å–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
  // –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –µ–≥–æ –≤ onModuleInit, –Ω–∞–ø—Ä–∏–º–µ—Ä
  async seedInitialMessages() {
    const existingMessagesCount = await this.messageModel.countDocuments();
    if (existingMessagesCount === 0) {
      this.logger.log('üå± No messages found in DB, seeding initial messages from AppService...');
      await this.createMessage('Service: First Message!', 'AppServiceSeed', 'general');
      await this.createMessage('Service: Another one!', 'AppServiceSeed', 'general');
      this.logger.log('üëç Initial messages seeded from AppService!');
    } else {
      this.logger.log(`‚ÑπÔ∏è ${existingMessagesCount} messages already exist, skipping AppService seeding.`);
    }
  }
}

// import { Injectable, Logger } from '@nestjs/common';

// @Injectable()
// export class AppService {
//   private readonly logger = new Logger(AppService.name);

//   constructor() {
//     // –≠—Ç–æ—Ç –ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
//     this.logger.log('AppService initialized in Chat app');
//   }

//   getHello(): string {
//     return 'Hello from Chat Service!';
//   }
// }
