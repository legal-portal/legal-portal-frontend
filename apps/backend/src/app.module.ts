// apps/backend/src/app.module.ts
import { Module } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config'; // ConfigService –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { PrismaService } from './prisma.service';

// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è PrismaClient, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
// –∏ –≤–Ω–µ–¥—Ä—è—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–µ–º (—Ö–æ—Ç—è —Å–µ–π—á–∞—Å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
export const PRISMA_CLIENT = 'PRISMA_CLIENT';

@Module({
  imports: [
    ConfigModule.forRoot({
      isGlobal: true,
      envFilePath: `.env`, // –ó–∞–≥—Ä—É–∂–∞–µ—Ç .env –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ DATABASE_URL –∏ –¥—Ä—É–≥–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
    }),
  ],
  controllers: [AppController],
  providers: [
    AppService,
    {
      provide: PrismaService, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PrismaService –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      useFactory: () => {
        // PrismaClient –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç DATABASE_URL –∏–∑ process.env
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ DATABASE_URL –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        // –∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ docker-compose.yml –¥–ª—è Docker
        const databaseUrl = process.env.DATABASE_URL;
        if (!databaseUrl) {
          throw new Error('[BackendService] DATABASE_URL is not defined in environment variables.');
        }
        console.log(`[BackendService] PrismaService factory will use datasource URL from env: ${databaseUrl}`);
        // PrismaClientOptions –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–ª–∞–≥–∞–µ—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ DATABASE_URL
        // –Ω–æ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏:
        // const prismaOptions: PrismaClientOptions = {
        //   datasources: {
        //     db: { // 'db' –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤–∞—à–µ–≥–æ datasource –≤ schema.prisma
        //       url: databaseUrl,
        //     },
        //   },
        //   log: process.env.NODE_ENV === 'development' ? ['query', 'info', 'warn', 'error'] : ['warn', 'error'],
        // };
        // return new PrismaService(prismaOptions);
        return new PrismaService(); // PrismaService –¥–æ–ª–∂–µ–Ω –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç PrismaClient
      },
    },
  ],
  exports: [PrismaService], // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º PrismaService –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
})
export class AppModule {}

// –í–∞—à apps/backend/src/prisma.service.ts –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
// import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
// import { PrismaClient, Prisma } from '@prisma/client'; // Prisma –¥–ª—è —Ç–∏–ø–æ–≤ –æ–ø—Ü–∏–π
//
// @Injectable()
// export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
//   constructor(options?: Prisma.PrismaClientOptions) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ factory
//     super(options); // PrismaClient –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç DATABASE_URL –∏–∑ process.env, –µ—Å–ª–∏ options.datasources.db.url –Ω–µ –∑–∞–¥–∞–Ω
//   }
//
//   async onModuleInit() {
//     try {
//       await this.$connect();
//       console.log('‚úÖ [BackendService] Prisma Client connected to PostgreSQL via PrismaService');
//     } catch (error) {
//       console.error('üî¥ [BackendService] Prisma Client failed to connect via PrismaService:', error);
//       // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//       // process.exit(1); // –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏ –ë–î –∫—Ä–∏—Ç–∏—á–Ω–∞
//     }
//   }
//
//   async onModuleDestroy() {
//     await this.$disconnect();
//   }
// }



// // apps/backend/src/app.module.ts
// import { Module } from '@nestjs/common';
// import { ConfigModule, ConfigService } from '@nestjs/config';
// import { PrismaClientOptions } from '@prisma/client/runtime/library'; // –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ options, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
// import { AppController } from './app.controller';
// import { AppService } from './app.service';
// import { PrismaService } from './prisma.service'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PrismaService –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞, –∞ –Ω–µ –∏–∑ @prisma/client

// @Module({
//   imports: [
//     ConfigModule.forRoot({
//       isGlobal: true,
//       // envFilePath: ['.env.local', '.env'], // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ .env.local
//       envFilePath: `.env`, // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ .env, –µ—Å–ª–∏ .env.local –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
//     }),
//   ],
//   controllers: [AppController],
//   providers: [
//     AppService,
//     {
//       provide: PrismaService,
//       inject: [ConfigService], // ConfigService –±—É–¥–µ—Ç –≤–Ω–µ–¥—Ä–µ–Ω –≤ useFactory
//       useFactory: (configService: ConfigService): PrismaService => {
//         // –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ URL, –∫–∞–∫ –º—ã –¥–µ–ª–∞–ª–∏ –¥–ª—è Mongoose
//         const nodeEnv = configService.get<string>('NODE_ENV');
//         if (!nodeEnv) throw new Error('[BackendService] NODE_ENV is not defined');

//         const user = configService.get<string>('DB_USER');
//         if (!user) throw new Error('[BackendService] DB_USER is not defined');

//         const password = configService.get<string>('DB_PASSWORD');
//         if (!password) throw new Error('[BackendService] DB_PASSWORD is not defined');

//         const port = configService.get<string>('DB_PORT');
//         if (!port) throw new Error('[BackendService] DB_PORT is not defined');

//         const dbName = configService.get<string>('DB_NAME');
//         if (!dbName) throw new Error('[BackendService] DB_NAME is not defined');

//         const schema = configService.get<string>('DB_SCHEMA');
//         if (!schema) throw new Error('[BackendService] DB_SCHEMA is not defined');

//         let host: string;

//         if (nodeEnv === 'production') {
//           const prodHost = configService.get<string>('PROD_DB_HOST');
//           if (!prodHost) {
//             throw new Error('[BackendService] PROD_DB_HOST is not defined for production');
//           }
//           host = prodHost;
//         } else {
//           const devHost = configService.get<string>('DEV_DB_HOST');
//           if (!devHost) {
//             throw new Error('[BackendService] DEV_DB_HOST is not defined for development');
//           }
//           host = devHost;
//         }

//         const dynamicDatabaseUrl = `postgresql://${user}:${password}@${host}:${port}/${dbName}?schema=${schema}`;

//         console.log(`[BackendService] NODE_ENV: ${nodeEnv}`);
//         console.log(`[BackendService] PrismaService factory will use datasource URL: ${dynamicDatabaseUrl}`);

//         // –¢–∏–ø–∏–∑–∞—Ü–∏—è options –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
//         const prismaOptions: PrismaClientOptions = {
//           datasources: {
//             db: { // 'db' –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –≤–∞—à–µ–≥–æ datasource –≤ schema.prisma
//               url: dynamicDatabaseUrl,
//             },
//           },
//           // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏ PrismaClient, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
//           // log: ['query', 'info', 'warn', 'error'],
//         };
//         return new PrismaService(prismaOptions);
//       },
//     },
//   ],
// })
// export class AppModule {}
