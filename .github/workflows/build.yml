# Имя файла: .github/workflows/deploy-changed.yml

name: "Build and Deploy Changed Services"

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed app directories
        id: changed-apps
        uses: tj-actions/changed-files@v44
        with:
          dir_names: "true"
          files: apps/**

      - name: Create build matrix
        id: set-matrix
        run: |
          json_array=$(echo "${{ steps.changed-apps.outputs.all_changed_files }}" | sed 's/apps\///g' | jq -R -s -c 'split(" ") | map(select(length > 0))')
          echo "matrix={\"service_name\":${json_array}}" >> $GITHUB_OUTPUT
          echo "Generated matrix for build: {\"service_name\":${json_array}}"

  build-and-push:
    # ----------------------------------------------------
    # ВОТ ЭТОТ IF УЖЕ ЕСТЬ И ОН ПРАВИЛЬНЫЙ
    # ----------------------------------------------------
    if: needs.detect-changes.outputs.matrix != '{"service_name":[]}'
    needs: detect-changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define Service Properties
        id: service-props
        env:
          SERVICES_JSON: |
            [
              { "name": "admin",         "scope": "admin",         "dockerfile": "tooling/docker/next/Dockerfile", "prisma_schema": "" },
              { "name": "backend",       "scope": "backend",       "dockerfile": "tooling/docker/nest/Dockerfile", "prisma_schema": "./apps/backend/prisma/schema.prisma" },
              { "name": "chat",          "scope": "chat",          "dockerfile": "tooling/docker/nest/Dockerfile", "prisma_schema": "" },
              { "name": "demo-worker",   "scope": "demo-worker",   "dockerfile": "tooling/docker/nest/Dockerfile", "prisma_schema": "" },
              { "name": "service-gateway", "scope": "service-gateway", "dockerfile": "tooling/docker/nest/Dockerfile", "prisma_schema": "" },
              { "name": "web",           "scope": "web",           "dockerfile": "tooling/docker/next/Dockerfile", "prisma_schema": "" }
            ]
        run: |
          SERVICE_NAME="${{ matrix.service_name }}"
          SERVICE_INFO=$(echo "$SERVICES_JSON" | jq -c ".[] | select(.name == \"$SERVICE_NAME\")")
          echo "scope=$(echo $SERVICE_INFO | jq -r '.scope')" >> $GITHUB_OUTPUT
          echo "dockerfile_path=$(echo $SERVICE_INFO | jq -r '.dockerfile')" >> $GITHUB_OUTPUT
          echo "prisma_schema_path=$(echo $SERVICE_INFO | jq -r '.prisma_schema')" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- ИСПРАВЛЕНИЕ ОШИБКИ С ТЕГАМИ ---
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service_name }}
          tags: |
            type=sha,prefix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image for ${{ matrix.service_name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          file: ${{ steps.service-props.outputs.dockerfile_path }}
          # ИСПОЛЬЗУЕМ ПРАВИЛЬНЫЙ СПОСОБ ЗАДАНИЯ ТЕГОВ
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_NAME=${{ matrix.service_name }}
            APP_SCOPE=${{ steps.service-props.outputs.scope }}
            PRISMA_SCHEMA_PATH=${{ steps.service-props.outputs.prisma_schema_path }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    # ----------------------------------------------------
    # ДОБАВЛЯЕМ IF СЮДА ДЛЯ БОЛЬШЕЙ НАДЕЖНОСТИ
    # ----------------------------------------------------
    if: always() && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped')
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_VPS_HOST }}
          username: ${{ secrets.HETZNER_VPS_USER }}
          key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}
          script: |
            cd ~/paritet
            echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -a -f


# name: "Build and Deploy All Services"

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# env:
#   REGISTRY: ghcr.io

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write

#     strategy:
#       fail-fast: false
#       max-parallel: 6
#       matrix:
#         # --- ТОЧНАЯ МАТРИЦА ДЛЯ ВАШИХ 6 СЕРВИСОВ ---
#         include:
#           - service_name: admin
#             service_scope: admin
#             dockerfile_path: tooling/docker/next/Dockerfile
#             prisma_schema_path: ""

#           - service_name: backend
#             service_scope: backend
#             dockerfile_path: tooling/docker/nest/Dockerfile
#             prisma_schema_path: ./apps/backend/prisma/schema.prisma

#           - service_name: chat
#             service_scope: chat
#             dockerfile_path: tooling/docker/nest/Dockerfile
#             prisma_schema_path: ""

#           - service_name: demo-worker
#             service_scope: demo-worker
#             dockerfile_path: tooling/docker/nest/Dockerfile
#             prisma_schema_path: ""

#           - service_name: service-gateway
#             service_scope: service-gateway
#             dockerfile_path: tooling/docker/nest/Dockerfile
#             prisma_schema_path: ""

#           - service_name: web
#             service_scope: web
#             dockerfile_path: tooling/docker/next/Dockerfile
#             prisma_schema_path: ""

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Restore Turborepo cache
#         uses: actions/cache@v4
#         with:
#           path: .turbo
#           key: ${{ runner.os }}-turbo-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-turbo-

#       - name: Set up QEMU
#         uses: docker/setup-qemu-action@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Build and push Docker image for ${{ matrix.service_name }}
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           platforms: linux/amd64,linux/arm64
#           file: ${{ matrix.dockerfile_path }}
#           tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service_name }}:latest
#           build-args: |
#             APP_NAME=${{ matrix.service_name }}
#             APP_SCOPE=${{ matrix.service_scope }}
#             PRISMA_SCHEMA_PATH=${{ matrix.prisma_schema_path }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#   deploy:
#     needs: build-and-push
#     runs-on: ubuntu-latest

#     steps:
#       - name: Deploy to VPS via SSH
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.HETZNER_VPS_HOST }}
#           username: ${{ secrets.HETZNER_VPS_USER }}
#           key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}
#           command_timeout: 15m
#           script: |
#             cd ~/paritet
#             # Используем ваш секрет CR_PAT
#             echo "${{ secrets.CR_PAT }}" | /usr/bin/docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
#             # Используем docker-compose с дефисом
#             /usr/bin/docker-compose pull
#             /usr/bin/docker-compose up -d
#             /usr/bin/docker image prune -a -f
