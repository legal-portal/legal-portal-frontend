name: "Build and Deploy Changed Services"

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  SERVICE_CONFIG_JSON: |-
    [
      {
        "id": "admin",
        "service_name": "admin",
        "service_scope": "admin",
        "dockerfile_path": "tooling/docker/next/Dockerfile",
        "prisma_schema_path": ""
      },
      {
        "id": "backend",
        "service_name": "backend",
        "service_scope": "backend",
        "dockerfile_path": "tooling/docker/nest/Dockerfile",
        "prisma_schema_path": "./apps/backend/prisma/schema.prisma"
      },
      {
        "id": "chat",
        "service_name": "chat",
        "service_scope": "chat",
        "dockerfile_path": "tooling/docker/nest/Dockerfile",
        "prisma_schema_path": ""
      },
      {
        "id": "demo-worker",
        "service_name": "demo-worker",
        "service_scope": "demo-worker",
        "dockerfile_path": "tooling/docker/nest/Dockerfile",
        "prisma_schema_path": ""
      },
      {
        "id": "service-gateway",
        "service_name": "service-gateway",
        "service_scope": "service-gateway",
        "dockerfile_path": "tooling/docker/nest/Dockerfile",
        "prisma_schema_path": ""
      },
      {
        "id": "web",
        "service_name": "web",
        "service_scope": "web",
        "dockerfile_path": "tooling/docker/next/Dockerfile",
        "prisma_schema_path": ""
      }
    ]

jobs:
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate_matrix.outputs.matrix }}
      any_changed: ${{ steps.generate_matrix.outputs.any_changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: changed_files_detector
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            admin: &admin_paths
              - 'apps/admin/**'
              - 'tooling/docker/next/Dockerfile'
              - 'package.json'
              - 'pnpm-lock.yaml'
            backend: &backend_paths
              - 'apps/backend/**'
              - 'tooling/docker/nest/Dockerfile'
              - 'apps/backend/prisma/schema.prisma'
              - 'package.json'
              - 'pnpm-lock.yaml'
            chat: &chat_paths
              - 'apps/chat/**'
              - 'tooling/docker/nest/Dockerfile'
              - 'package.json'
              - 'pnpm-lock.yaml'
            demo_worker: &demo_worker_paths
              - 'apps/demo-worker/**'
              - 'tooling/docker/nest/Dockerfile'
              - 'package.json'
              - 'pnpm-lock.yaml'
            service_gateway: &service_gateway_paths
              - 'apps/service-gateway/**'
              - 'tooling/docker/nest/Dockerfile'
              - 'package.json'
              - 'pnpm-lock.yaml'
            web: &web_paths
              - 'apps/web/**'
              - 'tooling/docker/next/Dockerfile'
              - 'package.json'
              - 'pnpm-lock.yaml'
      # <<<--- КОНЕЦ ШАГА 'Detect changed files'

      # НАЧАЛО НОВОГО ШАГА НА ПРАВИЛЬНОМ УРОВНЕ --->>>
      - name: Generate dynamic matrix
        id: generate_matrix
        run: |
          FULL_CONFIG_JSON='${{ env.SERVICE_CONFIG_JSON }}'
          MATRIX_ARRAY_CONTENT="" # Будем собирать только содержимое массива
          ANY_CHANGED="false"

          echo "--- Start: SERVICE_CONFIG_JSON ---"
          echo "$FULL_CONFIG_JSON" | jq . # Выведем для проверки валидности и форматирования
          echo "--- End: SERVICE_CONFIG_JSON ---"

          add_to_matrix() {
            local service_id=$1
            # Используем jq -c для компактного однострочного вывода
            SERVICE_JSON=$(echo "$FULL_CONFIG_JSON" | jq -c --arg id "$service_id" '.[] | select(.id == $id)')
            echo "Attempting to add service: $service_id"
            echo "Extracted JSON for $service_id: $SERVICE_JSON"

            if [[ -n "$SERVICE_JSON" && "$SERVICE_JSON" != "null" ]]; then
              if [[ -n "$MATRIX_ARRAY_CONTENT" ]]; then
                MATRIX_ARRAY_CONTENT+="," # Добавляем запятую перед следующим элементом
              fi
              MATRIX_ARRAY_CONTENT+="$SERVICE_JSON"
              ANY_CHANGED="true"
              echo "Added $service_id to matrix content."
            else
              echo "Service $service_id not found in config or invalid JSON extracted."
            fi
          }

          if [[ "${{ steps.changed_files_detector.outputs.admin }}" == "true" ]]; then
            add_to_matrix "admin"
          fi
          if [[ "${{ steps.changed_files_detector.outputs.backend }}" == "true" ]]; then
            add_to_matrix "backend"
          fi
          if [[ "${{ steps.changed_files_detector.outputs.chat }}" == "true" ]]; then
            add_to_matrix "chat"
          fi
          if [[ "${{ steps.changed_files_detector.outputs.demo_worker }}" == "true" ]]; then
            add_to_matrix "demo-worker"
          fi
          if [[ "${{ steps.changed_files_detector.outputs.service_gateway }}" == "true" ]]; then
            add_to_matrix "service-gateway"
          fi
          if [[ "${{ steps.changed_files_detector.outputs.web }}" == "true" ]]; then
            add_to_matrix "web"
          fi

          FINAL_MATRIX_JSON="[${MATRIX_ARRAY_CONTENT}]"

          echo "--- Final constructed matrix string before validation ---"
          echo "$FINAL_MATRIX_JSON"

          VALIDATED_MATRIX_JSON=$(echo "$FINAL_MATRIX_JSON" | jq -c .)

          echo "--- Validated matrix JSON for GITHUB_OUTPUT ---"
          echo "$VALIDATED_MATRIX_JSON"

          echo "matrix=$VALIDATED_MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "any_changed=$ANY_CHANGED" >> $GITHUB_OUTPUT
        env:
          ADMIN_CHANGED: ${{ steps.changed_files_detector.outputs.admin }}
          BACKEND_CHANGED: ${{ steps.changed_files_detector.outputs.backend }}
          CHAT_CHANGED: ${{ steps.changed_files_detector.outputs.chat }}
          DEMO_WORKER_CHANGED: ${{ steps.changed_files_detector.outputs.demo_worker }}
          SERVICE_GATEWAY_CHANGED: ${{ steps.changed_files_detector.outputs.service_gateway }}
          WEB_CHANGED: ${{ steps.changed_files_detector.outputs.web }}

  # ... остальная часть вашего workflow ...

  build-and-push:
    needs: determine-changes
    # Запускаем только если есть изменения
    if: needs.determine-changes.outputs.any_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      max-parallel: 6 # Можно оставить, т.к. матрица теперь будет меньше
      matrix:
        # Динамически загружаем матрицу из предыдущего job
        include: ${{ fromJson(needs.determine-changes.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/pnpm-lock.yaml') }} # Используйте ваш lock-файл
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image for ${{ matrix.service_name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          file: ${{ matrix.dockerfile_path }}
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service_name }}:latest
          build-args: |
            APP_NAME=${{ matrix.service_name }}
            APP_SCOPE=${{ matrix.service_scope }}
            PRISMA_SCHEMA_PATH=${{ matrix.prisma_schema_path }}
            # --- ДОБАВЛЕННЫЕ/ИЗМЕНЕННЫЕ СТРОКИ ---
            TURBO_API=http://135.181.105.32:3000
            TURBO_TOKEN=${{ secrets.YOUR_TURBO_REMOTE_CACHE_TOKEN }} # Используем созданный секрет
            TURBO_TEAMID=paritet # Имя вашей команды/проекта для неймспейсинга кэша
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service_name }}:buildcache-arm64 # Проверьте это именование
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service_name }}:buildcache-arm64,mode=max,compression=zstd

  deploy:
    needs: [determine-changes, build-and-push]
    # Запускаем только если были изменения И сборка прошла успешно
    # `success()` здесь неявно проверяет результат `build-and-push`
    if: needs.determine-changes.outputs.any_changed == 'true' && success()
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_VPS_HOST }}
          username: ${{ secrets.HETZNER_VPS_USER }}
          key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}
          command_timeout: 15m
          script: |
            cd ~/paritet
            echo "${{ secrets.CR_PAT }}" | /usr/bin/docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            echo "Using Docker Compose V2"
            docker compose version
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -a -f
