name: "Build and Deploy Backend"

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  SERVICE_NAME: backend
  SERVICE_SCOPE: backend
  DOCKERFILE_PATH: tooling/docker/nest/Dockerfile
  PRISMA_SCHEMA_PATH: ./apps/backend/prisma/schema.prisma

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- ДОБАВЬТЕ ЭТОТ ШАГ ДЛЯ КЭШИРОВАНИЯ ---
      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          # Указываем, ЧТО кэшировать
          path: .turbo
          # Ключ, по которому искать кэш
          key: ${{ runner.os }}-turbo-${{ hashFiles('**/package-lock.json') }}
          # Запасной ключ, если точного совпадения нет
          restore-keys: |
            ${{ runner.os }}-turbo-

      # Добавляем QEMU для мульти-архитектурной сборки
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Указываем, для каких платформ собирать образ
          platforms: linux/amd64,linux/arm64
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}:latest
          build-args: |
            APP_NAME=${{ env.SERVICE_NAME }}
            APP_SCOPE=${{ env.SERVICE_SCOPE }}
            PRISMA_SCHEMA_PATH=${{ env.PRISMA_SCHEMA_PATH }}
            TURBO_TOKEN=
            TURBO_TEAMID=
            TURBO_API=
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_VPS_HOST }}
          username: ${{ secrets.HETZNER_VPS_USER }}
          key: ${{ secrets.HETZNER_SSH_PRIVATE_KEY }}
          command_timeout: 15m
          script: |
            cd ~/paritet
            # Используем ваш секрет CR_PAT
            echo "${{ secrets.CR_PAT }}" | /usr/bin/docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            # Используем docker-compose с дефисом
            /usr/bin/docker-compose pull
            /usr/bin/docker-compose up -d
            /usr/bin/docker image prune -a -f
