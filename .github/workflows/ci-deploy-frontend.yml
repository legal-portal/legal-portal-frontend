name: Build & Deploy Next.js Frontend Docker Image

on:
  push:
    branches:
      - main # Замени на 'master', если твоя основная ветка называется master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # Имя образа будет user/repo-name
  SSH_HOST: 135.181.105.32 # <-- Замени на IP-адрес твоего Hetzner VPS
  SSH_USER: root # <-- Пользователь SSH (root по умолчанию)

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # Необходимо для пуша в GitHub Container Registry

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64,linux/arm64 # Собирает образ сразу для двух архитектур
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}

  # НОВЫЙ JOB для деплоя
  deploy:
    needs: build-and-push # Этот job будет запускаться только после успешной сборки и пуша
    runs-on: ubuntu-latest

    environment: production # Указываем окружение (необязательно, но хорошая практика)

    steps:
      - name: Checkout repository (Needed for SSH connection)
        uses: actions/checkout@v4

      - name: Deploy to Hetzner VPS
        uses: appleboy/ssh-action@master # Используем экшен для SSH-подключения
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Используем приватный ключ из секрета
          script: |
            # Перейди в нужную директорию на VPS (создадим ее позже)
            # mkdir -p /var/www/nextjs-frontend
            # cd /var/www/nextjs-frontend
            
            # Скачай новый образ
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # ОСТОРОЖНО! Эти команды остановят и удалят существующий контейнер
            # Мы пока не запускаем контейнер, так как для этого нужен docker-compose
            # Сейчас просто убедимся, что SSH работает и Docker pull проходит
            
            # Опционально: удалить старый образ, если есть
            # docker rmi $(docker images -f "dangling=true" -q) || true 
            # docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:<old_tag> || true
            
            # Проверь, что образ скачался
            docker images | grep ${{ env.IMAGE_NAME }}